// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/StyraInc/terraform-provider-styra/internal/provider/types"
	"github.com/StyraInc/terraform-provider-styra/internal/sdk"
	"github.com/StyraInc/terraform-provider-styra/internal/sdk/models/operations"
	"github.com/StyraInc/terraform-provider-styra/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &PolicyResource{}
var _ resource.ResourceWithImportState = &PolicyResource{}

func NewPolicyResource() resource.Resource {
	return &PolicyResource{}
}

// PolicyResource defines the resource implementation.
type PolicyResource struct {
	client *sdk.StyraDas
}

// PolicyResourceModel describes the resource data model.
type PolicyResourceModel struct {
	IfNoneMatch types.String             `tfsdk:"if_none_match"`
	Modules     map[string]types.String  `tfsdk:"modules"`
	Policy      types.String             `tfsdk:"policy"`
	RequestID   types.String             `tfsdk:"request_id"`
	Result      types.String             `tfsdk:"result"`
	Signature   *tfTypes.CryptoSignature `tfsdk:"signature"`
}

func (r *PolicyResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_policy"
}

func (r *PolicyResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Policy Resource",
		Attributes: map[string]schema.Attribute{
			"if_none_match": schema.StringAttribute{
				Optional:    true,
				Description: `etag`,
			},
			"modules": schema.MapAttribute{
				Required:    true,
				ElementType: types.StringType,
				Description: `module file name to rego (and also data.json/data.yaml if enabled for the tenant) contents dictionary`,
			},
			"policy": schema.StringAttribute{
				Required:    true,
				Description: `policy name`,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`.+`), "must match pattern "+regexp.MustCompile(`.+`).String()),
				},
			},
			"request_id": schema.StringAttribute{
				Computed: true,
			},
			"result": schema.StringAttribute{
				Computed:    true,
				Description: `Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
			"signature": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"excluded": schema.StringAttribute{
						Optional:    true,
						Description: `Parsed as JSON.`,
						Validators: []validator.String{
							validators.IsValidJSON(),
						},
					},
					"signatures": schema.StringAttribute{
						Optional:    true,
						Description: `Parsed as JSON.`,
						Validators: []validator.String{
							validators.IsValidJSON(),
						},
					},
				},
			},
		},
	}
}

func (r *PolicyResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.StyraDas)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.StyraDas, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PolicyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *PolicyResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var policy string
	policy = data.Policy.ValueString()

	ifNoneMatch := new(string)
	if !data.IfNoneMatch.IsUnknown() && !data.IfNoneMatch.IsNull() {
		*ifNoneMatch = data.IfNoneMatch.ValueString()
	} else {
		ifNoneMatch = nil
	}
	policiesV1PoliciesPutRequest := *data.ToSharedPoliciesV1PoliciesPutRequest()
	request := operations.UpdatePolicyRequest{
		Policy:                       policy,
		IfNoneMatch:                  ifNoneMatch,
		PoliciesV1PoliciesPutRequest: policiesV1PoliciesPutRequest,
	}
	res, err := r.client.Policies.UpdatePolicy(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PoliciesV1PolicyPutResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPoliciesV1PolicyPutResponse(res.PoliciesV1PolicyPutResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var policy1 string
	policy1 = data.Policy.ValueString()

	// create.policy.dependenciescreate.policy.dependencies impedance mismatch: boolean != classtrace=["Policy#create,update","Policy#create,update.req"]
	var dependencies *bool
	request1 := operations.GetPolicyRequest{
		Policy:       policy1,
		Dependencies: dependencies,
	}
	res1, err := r.client.Policies.GetPolicy(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.PoliciesV1PolicyGetResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedPoliciesV1PolicyGetResponse(res1.PoliciesV1PolicyGetResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PolicyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *PolicyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var policy string
	policy = data.Policy.ValueString()

	// read.policy.dependenciesread.policy.dependencies impedance mismatch: boolean != classtrace=["Policy#create,update","Policy#create,update.req"]
	var dependencies *bool
	request := operations.GetPolicyRequest{
		Policy:       policy,
		Dependencies: dependencies,
	}
	res, err := r.client.Policies.GetPolicy(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PoliciesV1PolicyGetResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPoliciesV1PolicyGetResponse(res.PoliciesV1PolicyGetResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PolicyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *PolicyResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var policy string
	policy = data.Policy.ValueString()

	ifNoneMatch := new(string)
	if !data.IfNoneMatch.IsUnknown() && !data.IfNoneMatch.IsNull() {
		*ifNoneMatch = data.IfNoneMatch.ValueString()
	} else {
		ifNoneMatch = nil
	}
	policiesV1PoliciesPutRequest := *data.ToSharedPoliciesV1PoliciesPutRequest()
	request := operations.UpdatePolicyRequest{
		Policy:                       policy,
		IfNoneMatch:                  ifNoneMatch,
		PoliciesV1PoliciesPutRequest: policiesV1PoliciesPutRequest,
	}
	res, err := r.client.Policies.UpdatePolicy(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PoliciesV1PolicyPutResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPoliciesV1PolicyPutResponse(res.PoliciesV1PolicyPutResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var policy1 string
	policy1 = data.Policy.ValueString()

	// update.policy.dependenciesupdate.policy.dependencies impedance mismatch: boolean != classtrace=["Policy#create,update.req","Policy#create,update"]
	var dependencies *bool
	request1 := operations.GetPolicyRequest{
		Policy:       policy1,
		Dependencies: dependencies,
	}
	res1, err := r.client.Policies.GetPolicy(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.PoliciesV1PolicyGetResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedPoliciesV1PolicyGetResponse(res1.PoliciesV1PolicyGetResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PolicyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *PolicyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var policy string
	policy = data.Policy.ValueString()

	request := operations.DeletePolicyRequest{
		Policy: policy,
	}
	res, err := r.client.Policies.DeletePolicy(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *PolicyResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("policy"), req.ID)...)
}
